/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package reto2;

import java.awt.Color;
import java.awt.Graphics2D;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
/**
 *
 * @author sebastian
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    
    private boolean secondTime = false;
    private Vertex start, end;
    private Graphics2D gr;
    private final int INSIDE = 0;
    private final int LEFT = 1;
    private final int RIGHT = 2;
    private final int BOTTOM = 4;
    private final int TOP = 8;
    private int xmin, xmax,ymin,ymax;
    private PolygonObject figure;
    boolean sutherland = false;
    public Interfaz() {
        initComponents();
        gr = (Graphics2D) jPanel2.getGraphics();
        figure =getPolygon("inputFile/newFile");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Instrucciones");

        jScrollPane1.setEnabled(false);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Primero pulsa Dibujar figurita.A \ncontinuación,Da click normal \nsobre donde\ndeseas poner el primer punto,\nluego click donde pondrás el\nsegundo para dibujar el rectángulo.");
        jTextArea1.setEnabled(false);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Limpiar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Dibujar figurita");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("On = Sutherland OFF = Liang");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jButton1)
                        .addGap(43, 43, 43)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jToggleButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jToggleButton1)
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(169, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        // TODO add your handling code here:
        secondTime = !secondTime;
        gr.setColor(Color.BLUE);
        if(!secondTime){
            //xmax = evt.getX();
            //ymax = evt.getY();
            end = new Vertex(evt.getX(),evt.getY());
            if(start.x<end.x){
                xmin = start.x;
                xmax = end.x;
            }else{
                xmin = end.x;
                xmax = start.x;
            }
            if(start.y < end.y){
                ymin = start.y;
                ymax = end.y;
            }else{
                ymin = end.y;
                ymax = start.y;
            }
            gr.drawLine(end.x, end.y, end.x, end.y);
            Vertex pointUpToStart = new Vertex(start.x,end.y);
            Vertex pointUnderEnd = new Vertex(end.x,start.y);
            PolygonObject clippedArea = new PolygonObject();
            clippedArea.addEdge(new Edge(start,pointUpToStart));
            clippedArea.addEdge(new Edge(pointUpToStart,end));
            clippedArea.addEdge(new Edge(end,pointUnderEnd));
            clippedArea.addEdge(new Edge(pointUnderEnd,start));
            clippedArea.drawObject(gr);
            whichMethod(sutherland);
            //gr.drawRect(start.x, start.y,Math.abs(start.x - end.x), Math.abs(start.y - end.y));
        }else{
            xmin = evt.getX();
            ymin = evt.getY();
            start = new Vertex(evt.getX(),evt.getY());
            //gr.clearRect(0, 0, jPanel2.getWidth(), jPanel2.getHeight());
            gr.drawLine(start.x, start.y, start.x, start.y);
        }
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        gr.setColor(Color.BLACK);
        figure =getPolygon("inputFile/newFile");
        figure.drawObject(gr);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        gr.clearRect(0, 0, jPanel2.getWidth(), jPanel2.getHeight());
        secondTime = false;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        if(jToggleButton1.isSelected()){
            sutherland = true;
        }else{
            sutherland = false;
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed
    private void whichMethod(boolean choice){
        if(choice){
             for(Edge edge : figure.edges){
                cohenSutherlandLineClipAndDraw(edge, Color.GREEN, gr);
            }
        }
        else{
            for(Edge edge : figure.edges){
                liangBarsky(edge, Color.GREEN, gr);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Interfaz interfaz = new Interfaz();
                interfaz.setLocationRelativeTo(null);
                interfaz.setResizable(false);
                interfaz.setVisible(true);
                
            }
        });
    }

    private PolygonObject getPolygon(String file){
        Scanner scanner;
        try{
            File in = new File(file);
            scanner = new Scanner(in);
        PolygonObject figure = new PolygonObject();
        
        int numberOfVertex = scanner.nextInt();
        Vertex verts[] = new Vertex[numberOfVertex];
        for(int i = 0; i < numberOfVertex;i++){
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            verts[i] = new Vertex(x,y);
        }
        int numberOfEdges = scanner.nextInt();
        for(int i = 0; i < numberOfEdges;i++){
            int first = scanner.nextInt();
            int last = scanner.nextInt();
            figure.addEdge(new Edge(verts[first],verts[last]));
        }
        scanner.close();
        return figure;
        }catch(FileNotFoundException e){
            
        }
        return null;
    }
    private int computeOutCode(int x, int y){

        int code = INSIDE;
        if (x < xmin)           // to the left of clip window
		code |= LEFT;
	else if (x > xmax)      // to the right of clip window
		code |= RIGHT;
	if (y < ymin)           // below the clip window
		code |= BOTTOM;
	else if (y > ymax)      // above the clip window
		code |= TOP;

	return code;
    }
    
    private void liangBarsky(Edge edge, Color color, Graphics2D gr){
 
        //System.out.println("\nExecuting Liang-Barsky...");
        double u1 = 0, u2 = 1;
        int x0 = edge.start.x, y0 = edge.start.y, x1 = edge.end.x, y1 = edge.end.y;
        int dx = x1 - x0, dy = y1 - y0;
        int p[] = {-dx, dx, -dy, dy};
        int q[] = {x0 - xmin, xmax - x0, y0 - ymin, ymax - y0};
        for (int i = 0; i < 4; i++) {
            if (p[i] == 0) {
                if (q[i] < 0) {
                    return;
                }
            } 
            else {
                double u = (double) q[i] / p[i];
                if (p[i] < 0) {
                    u1 = Math.max(u, u1);
                } 
                else {
                    u2 = Math.min(u, u2);
                }
            }
        }
        //System.out.println("u1: " + u1 + ", u2: " + u2);
        if (u1 > u2) {
            return;
        }
        int nx0, ny0, nx1, ny1;
        nx0 = (int) (x0 + u1 * dx);
        ny0 = (int) (y0 + u1 * dy);
        nx1 = (int) (x0 + u2 * dx);
        ny1 = (int) (y0 + u2 * dy);
        gr.setColor(color);
        gr.drawLine(nx0, ny0, nx1, ny1);
        //return new LineSegment(nx0, ny0, nx1, ny1);
    }
    
    private void cohenSutherlandLineClipAndDraw(Edge edge, Color color, Graphics2D gr)
{
	// compute outcodes for P0, P1, and whatever point lies outside the clip rectangle
	int outCode0 = computeOutCode(edge.start.x, edge.start.y);
	int outCode1 = computeOutCode(edge.end.x, edge.end.y);
	boolean accept = false;
        int x0 = edge.start.x, x1 = edge.end.x, y0 = edge.start.y,y1 = edge.end.y;
	while (true) {
		if (!((outCode0 | outCode1) != 0)) { // Bitwise OR is 0. Trivially accept and get out of loop
			accept = true;
			break;
		} else if ((outCode0 & outCode1) != 0) { // Bitwise AND is not 0. Trivially reject and get out of loop
			break;
		} else {
			// failed both tests, so calculate the line segment to clip
			// from an outside point to an intersection with clip edge
			double x = 0, y = 0;

			// At least one endpoint is outside the clip rectangle; pick it.
			int outCodeOut;
                        if(outCode0 != 0){
                            outCodeOut = outCode0;
                        }else{
                            outCodeOut = outCode1;
                        }
                        //int outcodeOut = outcode0 ? outcode0 : outcode1;

			// Now find the intersection point;
			// use formulas y = y0 + slope * (x - x0), x = x0 + (1 / slope) * (y - y0)
			if ((outCodeOut & TOP) != 0) {           // point is above the clip rectangle
				x = x0 + (x1 - x0) * (ymax - y0) / (y1 - y0);
				y = ymax;
			} else if ((outCodeOut & BOTTOM) != 0) { // point is below the clip rectangle
				x = x0 + (x1 - x0) * (ymin - y0) / (y1 - y0);
				y = ymin;
			} else if ((outCodeOut & RIGHT) != 0) {  // point is to the right of clip rectangle
				y = y0 + (y1 - y0) * (xmax - x0) / (x1 - x0);
				x = xmax;
			} else if ((outCodeOut & LEFT) != 0) {   // point is to the left of clip rectangle
				y = y0 + (y1 - y0) * (xmin - x0) / (x1 - x0);
				x = xmin;
			}

			// Now we move outside point to intersection point to clip
			// and get ready for next pass.
			if (outCodeOut == outCode0) {
				x0 = (int)Math.round(x);
				y0 = (int)Math.round(y);
				outCode0 = computeOutCode(x0, y0);
			} else {
				x1 = (int)Math.round(x);
				y1 = (int)Math.round(y);
				outCode1 = computeOutCode(x1, y1);
			}
		}
	}
	if (accept) {
               // Following functions are left for implementation by user based on
               // their platform (OpenGL/graphics.h etc.)
               gr.setColor(color);
            gr.drawLine(x0, y0, x1, y1);
	}
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
    


}
